#!/usr/bin/perl

use strict;
use warnings;
use utf8;
use HTML::Entities;
use Encode qw/encode decode/;
use File::Path 'rmtree';

sub trim { my $s = shift; $s =~ s/^\s+|\s+$//g; return $s };

binmode STDIN, ":utf8";
binmode STDOUT, ":utf8";

my ($raw_corpora_dir, $cleaned_corpora_dir) = @ARGV;

if (2 != scalar @ARGV || not defined $raw_corpora_dir || not defined $cleaned_corpora_dir) {
    print "[Usage] $0 [raw corpus directory] [cleaned corpus directory]\n";
    exit 1;
}

die "[ERROR] raw corpus directory $raw_corpora_dir does not exist\n"
    unless (-d $raw_corpora_dir);

if (-d $cleaned_corpora_dir) {
    rmtree($cleaned_corpora_dir);
}

die "[ERROR] failed to make cleaned corpus directory $cleaned_corpora_dir: $!\n"
    unless (mkdir $cleaned_corpora_dir);

opendir(RAW_CORPORA_DIR, $raw_corpora_dir)
    or die "[ERROR] failed to open $raw_corpora_dir: $!\n";
opendir(CLEANED_CORPORA_DIR, $cleaned_corpora_dir)
    or die "[ERROR] failed to open $cleaned_corpora_dir: $!\n";

my @raw_corpora = grep {-f "$raw_corpora_dir/$_" && /^.*\.txt$/} readdir(RAW_CORPORA_DIR);

# a hash mainly for half/full width character normalization
my %hf_width_map = (
    "¡" => " ",
    "¤" => " ",
    "¥" => " ",
    "°" => " ",
    "±" => " ",
    "²" => " ",
    "³" => " ",
    "´" => "\'",
    "·" => " ",
    "¸" => " ",
    "¹" => " ",
    "¼" => " ",
    "½" => " ",
    "Ö" => " ",
    "×" => "x",
    "Ü" => " ",
    "ß" => " ",
    "ä" => " ",
    "æ" => " ",
    "ç" => " ",
    "é" => " ",
    "ö" => " ",
    "÷" => " ",
    "ø" => " ",
    "ü" => " ",
    "ħ" => " ",
    "˚" => " ",
    "Ρ" => " ",
    "Φ" => " ",
    "α" => " ",
    "β" => " ",
    "γ" => " ",
    "δ" => " ",
    "μ" => " ",
    "ν" => " ",
    "π" => " ",
    "σ" => " ",
    "φ" => " ",
    "χ" => " ",
    "ψ" => " ",
    "е" => " ",
    "†" => " ",
    "‡" => " ",
    "‥" => " ",
    "…" => " ",
    "₁" => " ",
    "₂" => " ",
    "℃" => " ",
    "ℓ" => " ",
    "⅓" => " ",
    "⅔" => " ",
    "⅛" => " ",
    "Ⅰ" => " ",
    "Ⅱ" => " ",
    "Ⅲ" => " ",
    "Ⅳ" => " ",
    "Ⅴ" => " ",
    "Ⅵ" => " ",
    "Ⅶ" => " ",
    "Ⅷ" => " ",
    "Ⅸ" => " ",
    "Ⅹ" => " ",
    "ⅰ" => " ",
    "ⅱ" => " ",
    "ⅲ" => " ",
    "ⅳ" => " ",
    "ⅴ" => " ",
    "ⅵ" => " ",
    "ⅶ" => " ",
    "ⅹ" => " ",
    "←" => " ",
    "↑" => " ",
    "→" => " ",
    "↓" => " ",
    "↔" => " ",
    "⇒" => " ",
    "∀" => " ",
    "∃" => " ",
    "∈" => " ",
    "∧" => " ",
    "∨" => " ",
    "∴" => " ",
    "≡" => " ",
    "⊙" => " ",
    "⌒" => " ",
    "⑦" => " ",
    "⑧" => " ",
    "⑪" => " ",
    "⑫" => " ",
    "⑬" => " ",
    "⑭" => " ",
    "⑮" => " ",
    "⑴" => " ",
    "⑵" => " ",
    "⑶" => " ",
    "⑷" => " ",
    "⑸" => " ",
    "⑹" => " ",
    "⑺" => " ",
    "⑻" => " ",
    "⑼" => " ",
    "⒜" => " ",
    "⒝" => " ",
    "⒞" => " ",
    "ⓐ" => " ",
    "ⓑ" => " ",
    "ⓒ" => " ",
    "ⓓ" => " ",
    "ⓛ" => " ",
    "ⓝ" => " ",
    "┞" => " ",
    "■" => " ",
    "□" => " ",
    "▣" => " ",
    "▧" => " ",
    "▨" => " ",
    "▪" => " ",
    "△" => " ",
    "▹" => " ",
    "▼" => " ",
    "▽" => " ",
    "◁" => " ",
    "◆" => " ",
    "◇" => " ",
    "◈" => " ",
    "○" => " ",
    "◎" => " ",
    "●" => " ",
    "◦" => " ",
    "★" => " ",
    "☆" => " ",
    "☎" => " ",
    "☞" => " ",
    "♠" => " ",
    "♡" => " ",
    "♣" => " ",
    "♤" => " ",
    "♥" => " ",
    "♩" => " ",
    "♪" => " ",
    "♬" => " ",
    "❷" => " ",
    "❿" => " ",
    "➀" => " ",
    "➈" => " ",
    "➌" => " ",
    "➍" => " ",
    "➎" => " ",
    "➏" => " ",
    "ㆍ" => " ",
    "㈀" => " ",
    "㈁" => " ",
    "㈎" => " ",
    "㈏" => " ",
    "㈐" => " ",
    "㈑" => " ",
    "㈒" => " ",
    "㉠" => " ",
    "㉡" => " ",
    "㉢" => " ",
    "㉣" => " ",
    "㉤" => " ",
    "㉥" => " ",
    "㉮" => " ",
    "㉯" => " ",
    "㉰" => " ",
    "㉱" => " ",
    "㊉" => " ",
    "㎉" => " ",
    "㎍" => " ",
    "㎎" => " ",
    "㎏" => " ",
    "㎐" => " ",
    "㎑" => " ",
    "㎒" => " ",
    "㎓" => " ",
    "㎖" => " ",
    "㎗" => " ",
    "㎘" => " ",
    "㎚" => " ",
    "㎛" => " ",
    "㎜" => " ",
    "㎝" => " ",
    "㎞" => " ",
    "㎟" => " ",
    "㎠" => " ",
    "㎡" => " ",
    "㎢" => " ",
    "㎣" => " ",
    "㎤" => " ",
    "㎥" => " ",
    "㎧" => " ",
    "㎳" => " ",
    "㎾" => " ",
    "㎿" => " ",
    "㏄" => " ",
    "㏈" => " ",
    "㏊" => " ",
    "＀" => " ",
    "＿" => " ",
    "･" => " ",
    "ｦ" => " ",
    "ｧ" => " ",
    "ｨ" => " ",
    "ｩ" => " ",
    "ｪ" => " ",
    "ｫ" => " ",
    "ｬ" => " ",
    "ｭ" => " ",
    "ｮ" => " ",
    "ｯ" => " ",
    "ｰ" => " ",
    "ｱ" => " ",
    "ｲ" => " ",
    "ｳ" => " ",
    "ｴ" => " ",
    "ｵ" => " ",
    "ｶ" => " ",
    "ｷ" => " ",
    "ｸ" => " ",
    "ｹ" => " ",
    "ｺ" => " ",
    "ｻ" => " ",
    "ｼ" => " ",
    "ｽ" => " ",
    "ｾ" => " ",
    "ｿ" => " ",
    "ﾀ" => " ",
    "ﾁ" => " ",
    "ﾂ" => " ",
    "ﾃ" => " ",
    "ﾄ" => " ",
    "ﾅ" => " ",
    "ﾆ" => " ",
    "ﾇ" => " ",
    "ﾈ" => " ",
    "ﾉ" => " ",
    "ﾊ" => " ",
    "ﾋ" => " ",
    "ﾌ" => " ",
    "ﾍ" => " ",
    "ﾎ" => " ",
    "ﾏ" => " ",
    "ﾐ" => " ",
    "ﾑ" => " ",
    "ﾒ" => " ",
    "ﾓ" => " ",
    "ﾔ" => " ",
    "ﾕ" => " ",
    "ﾖ" => " ",
    "ﾗ" => " ",
    "ﾘ" => " ",
    "ﾙ" => " ",
    "ﾚ" => " ",
    "ﾛ" => " ",
    "ﾜ" => " ",
    "ﾝ" => " ",
    "ﾡ" => " ",
    "ﾢ" => " ",
    "ﾣ" => " ",
    "ﾤ" => " ",
    "ﾥ" => " ",
    "ﾦ" => " ",
    "ﾧ" => " ",
    "ﾨ" => " ",
    "ﾩ" => " ",
    "ﾪ" => " ",
    "ﾫ" => " ",
    "ﾬ" => " ",
    "ﾭ" => " ",
    "ﾮ" => " ",
    "ﾯ" => " ",
    "ﾰ" => " ",
    "ﾱ" => " ",
    "ﾲ" => " ",
    "ﾳ" => " ",
    "ﾴ" => " ",
    "ﾵ" => " ",
    "ﾶ" => " ",
    "ﾷ" => " ",
    "ﾸ" => " ",
    "ﾹ" => " ",
    "ﾺ" => " ",
    "ﾻ" => " ",
    "ﾼ" => " ",
    "ﾽ" => " ",
    "ﾾ" => " ",
    "﾿" => " ",
    "￀" => " ",
    "￁" => " ",
    "ￂ" => " ",
    "ￃ" => " ",
    "ￄ" => " ",
    "ￅ" => " ",
    "ￆ" => " ",
    "ￇ" => " ",
    "￈" => " ",
    "￉" => " ",
    "ￊ" => " ",
    "ￋ" => " ",
    "ￌ" => " ",
    "ￍ" => " ",
    "ￎ" => " ",
    "ￏ" => " ",
    "￐" => " ",
    "￑" => " ",
    "ￒ" => " ",
    "ￓ" => " ",
    "ￔ" => " ",
    "ￕ" => " ",
    "ￖ" => " ",
    "ￗ" => " ",
    "￘" => " ",
    "￙" => " ",
    "ￚ" => " ",
    "ￛ" => " ",
    "ￜ" => " ",
    "￝" => " ",
    "￞" => " ",
    "￟" => " ",
    "￠" => " ",
    "￡" => " ",
    "￢" => " ",
    "￣" => " ",
    "￤" => " ",
    "￥" => " ",
    "￦" => " ",
    "￧" => " ",
    "￩" => " ",
    "￪" => " ",
    "￫" => " ",
    "￬" => " ",
    "￭" => " ",
    "￮" => " ",
    "￯" => " ",
    "￰" => " ",
    "￱" => " ",
    "￲" => " ",
    "￳" => " ",
    "￴" => " ",
    "￵" => " ",
    "￶" => " ",
    "￷" => " ",
    "￸" => " ",
    "￹" => " ",
    "�" => " ",
    "！" => "!",
    "˝" => "\"",
    "“" => "\"",
    "”" => "\"",
    "″" => "\"",
    "〃" => "\"",
    "『" => "\"",
    "』" => "\"",
    "＂" => "\"",
    "｢" => "\"",
    "｣" => "\"",
    "＃" => "#",
    "＄" => "\$",
    "％" => "\%",
    "＆" => "\&",
    "ʹ" => "\'",
    "˙" => "\'",
    "‘" => "\'",
    "’" => "\'",
    "′" => "\'",
    "＇" => "\'",
    "｀" => "\'",
    "ﾞ" => "\'",
    "ﾟ" => "\'",
    "（" => "(",
    "｟" => "(",
    "㈜" => "(주)",
    "）" => ")",
    "｠" => ")",
    "※" => "*",
    "＊" => "*",
    "＋" => "+",
    "、" => ",",
    "，" => ",",
    "､" => ",",
    "―" => "-",
    "─" => "-",
    "－" => "-",
    "。" => ".",
    "．" => ".",
    "｡" => ".",
    "／" => "/",
    "０" => "0",
    "１" => "1",
    "２" => "2",
    "３" => "3",
    "４" => "4",
    "５" => "5",
    "６" => "6",
    "７" => "7",
    "８" => "8",
    "９" => "9",
    "ː" => ":",
    "：" => ":",
    "；" => ";",
    "≪" => "<",
    "〈" => "<",
    "《" => "<",
    "＜" => "<",
    "〓" => "=",
    "＝" => "=",
    "≫" => ">",
    "〉" => ">",
    "》" => ">",
    "＞" => ">",
    "？" => "?",
    "＠" => "@",
    "Ｖ" => "V",
    "Ｘ" => "X",
    "〔" => "[",
    "［" => "[",
    "＼" => "\\",
    "〕" => "]",
    "］" => "]",
    "＾" => "^",
    "＿" => "_",
    "Ａ" => "a",
    "ａ" => "a",
    "Ｂ" => "b",
    "ｂ" => "b",
    "Ｃ" => "c",
    "ｃ" => "c",
    "Ｄ" => "d",
    "ｄ" => "d",
    "Ｅ" => "e",
    "ｅ" => "e",
    "Ｆ" => "f",
    "ｆ" => "f",
    "Ｇ" => "g",
    "ｇ" => "g",
    "Ｈ" => "h",
    "ｈ" => "h",
    "Ｉ" => "i",
    "ｉ" => "i",
    "Ｊ" => "j",
    "ｊ" => "j",
    "Ｋ" => "k",
    "ｋ" => "k",
    "Ｌ" => "l",
    "ｌ" => "l",
    "Ｍ" => "m",
    "ｍ" => "m",
    "Ｎ" => "n",
    "ｎ" => "n",
    "Ｏ" => "o",
    "ｏ" => "o",
    "Ｐ" => "p",
    "ｐ" => "p",
    "Ｑ" => "q",
    "ｑ" => "q",
    "Ｒ" => "r",
    "ｒ" => "r",
    "Ｓ" => "s",
    "ｓ" => "s",
    "Ｔ" => "t",
    "ｔ" => "t",
    "Ｕ" => "u",
    "ｕ" => "u",
    "Ｖ" => "v",
    "ｖ" => "v",
    "Ｗ" => "w",
    "ｗ" => "w",
    "Ｘ" => "x",
    "ｘ" => "x",
    "Ｙ" => "y",
    "ｙ" => "y",
    "Ｚ" => "z",
    "ｚ" => "z",
    "｛" => "{",
    "∥" => "|",
    "│" => "|",
    "｜" => "|",
    "￨" => "|",
    "｝" => "}",
    "˜" => "~",
    "∼" => "~",
    "～" => "~",
);
my $hf_width_pat = join("|", keys %hf_width_map);

# characters/symbols to remove globally in each line (some may require to be escaped)
my @del_chars = qw ( ○ ▴ );
my $del_chars_pat = join("|", @del_chars);

foreach my $corpus (@raw_corpora) {
    print "[processing file] $corpus\n";

    open(my $ifh, '<:encoding(UTF-8)', "$raw_corpora_dir/$corpus")
        or die "Could not open file '$raw_corpora_dir/$corpus' $!";
    open(my $ofh, '>:encoding(UTF-8)', "$cleaned_corpora_dir/$corpus")
        or die "Could not open file '$cleaned_corpora_dir/$corpus' $!";

    while (my $line = <$ifh>) {
        next if ($line !~ m/\p{InHangul_Syllables}/);
        next if ($line =~ m/BR.*\.txt.*원본:.*\.hwp/);  # ex) BRBB0062.txt, 원본:bb93b002.hwp
        chomp $line;
        $line = decode_entities($line);

        # text normalization
        $line =~ s/($hf_width_pat)/$hf_width_map{$1}/g;
        # text cleaning
        $line =~ s/^\(([^\(\)]+)\)$/$1/g;
        $line =~ s/<trunc>[^<>]*<\/trunc>//g;
        $line =~ s/([\s<>])[\p{P}\p{Hangul}a-zA-Z0-9]*[X]+(?:\s+X+)*[\p{P}\p{Hangul}a-zA-Z0-9]*([\s<>])/$1$2/g;
        $line =~ s/::+//g;  # for cases like "그~ 김치후선생::이"
        $line =~ s/(\p{InHangul_Syllables})~([\s\p{P}])/$1$2/g;  # ex) "인민들과 만나지 않고 이~ 저::~,"
        $line =~ s/\`/'/g;
        $line =~ s/[「」]/"/g;
        $line =~ s/[【】◀▶]//g;
        $line =~ s/^" | " //g;  # caution
        $line =~ s/ ; | - / /g;
        $line =~ s/(\p{L})_(\p{L})/$1 $2/g;
        # for cases of literary corpora like "▴ 오빠 = 별로 없다."
        $line =~ s/^(\>\> |\*+ |◆ ?|▴ ?|◇ ?|\<\> +|● ?|── +|\|\| +|\! +)(\p{InHangul_Syllables}+\s*=\s*)?//;
        $line =~ s/$del_chars_pat//g;
        $line =~ s/<[^<>]+$|^[^<>]+>//g;
        $line =~ s/<[^\"<>]*\"((?:[^\"\p{InHangul_Syllables}]*\p{InHangul_Syllables}+[^\"\p{InHangul_Syllables}]*)+)\"[^\"<>]*>/$1/g;
        $line =~ s/<((?:[^<\/>\p{InHangul_Syllables}]*\p{InHangul_Syllables}+[^<\/>\p{InHangul_Syllables}]*)+)>/$1/g;
        $line =~ s/(<\/?(div|br|p|li|dt|dd)[^a-z]*?\/?>\s*)+/ /ig;
        $line =~ s/<[^<>]+>//g;
        $line =~ s/ / /g;  # nbsp
        $line =~ s/\x{FEFF}//g;  # zero width nbsp
        $line =~ s/ +/ /g;
        $line = trim $line;
        $line =~ s/\,$//;  # for colloquial corpora
        $line =~ s/^- | -$//g;  # for colloquial corpora
        $line =~ s/\. +"$/\."/;
        $line =~ s/(\d+)\. +(\d+)%/$1\.$2%/g;  # for cases of literary corpora like "49. 4%""
        $line =~ s/""+//g;
        next if ($line =~ m/^\s*$/);

        print $ofh $line."\n";
    }

    close($ofh);
    close($ifh);
}

closedir(CLEANED_CORPORA_DIR);
closedir(RAW_CORPORA_DIR);
